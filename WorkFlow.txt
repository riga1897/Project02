Создать модули:
- для взаимодействия с API
1.	 Взаимодействие с API
Создан абстрактный класс для работы с API.
Реализован метод подключения к API в абстрактном классе.
Реализован метод получения вакансий отдельно в абстрактном классе.
Используется декоратор @abstract_method для методов абстрактного класса.
Абстрактные методы не имеют реализации.
Создан класс для работы с hh.ru.
Класс для работы с hh.ru наследуется от абстрактного.
Реализованы все методы абстрактного класса.
---
Атрибуты экземпляра класса — приватные.
Метод подключения к API hh.ru — приватный.
В методе подключения к API отправляется запрос на базовый URL.
В методе подключения к API происходит проверка статус-кода ответа.
Метод подключения к API hh.ru вызывается в методе получения данных перед отправкой запроса.
--
Метод получения данных принимает параметр — ключевое слово для поиска вакансий.
Метод получения данных формирует параметры для запроса как минимум из
text ,  per_page .
Метод получения данных отправляет запрос на API hh.ru для получения данных о вакансиях по ключевому слову.
Метод получения данных собирает данные ответа в формате списка словарей из ключа item  .
---
модуль для взаимодействия с вакансиями.
2.	 Работа с вакансиями
Создан класс для работы с вакансиями.
В классе используется
__slots__
 для экономии памяти.
У каждого экземпляра вакансии есть минимум 4 атрибута.
В классе реализованы методы сравнения вакансий по зарплате.
Методы сравнения реализованы через магические методы.
В классе реализованы методы для валидации данных.
Методы валидации — приватные.
Методы валидации используются при инициализации атрибутов.
модуль для взаимодействия с файлами
3.	 Работа с файлами
Создан абстрактный класс для работы с файлами.
Реализован метод получения данных из файла.
Реализован метод получения добавления данных в файл.
Реализован метод удаления данных из файла.
Используется декоратор
@abstract_method
 для методов абстрактного класса.
Абстрактные методы не имеют реализации.
Реализован класс для работы с JSON-файлами.
Класс для работы с JSON-файлами наследуется от абстрактного.
В JSON-файл сохраняются данные, соответствующие атрибутам класса вакансий, с данными в виде списка словарей.
Файл не перезаписывается при каждом запуске программы, а добавляет данные.
Файл не сохраняет дубли вакансий.
В экземплярах класса есть атрибут — имя файла, которое может быть назначено при создании экземпляра.
Атрибут имени файла — приватный.
Атрибут имени файла имеет значение по умолчанию.
Реализованы дополнительные классы для работы с файлами.

4.	 Вспомогательные функции
Дублирующаяся функциональность вынесена в функции.
Вспомогательные функции вынесены в отдельный модуль.
Вспомогательные функции документированы.
Вспомогательные функции типизированы.
5.	 Интерфейс управления
Создана функция взаимодействия с пользователем.
Функция использует экземпляры классов и их методы, реализованные ранее.
Не дублируется функциональность, реализованная в классах.
Интерфейс взаимодействия с пользователем реализован понятным текстом, т. е. в выводе не используются коллекции, только человекочитаемые строки.
Функция взаимодействия с пользователем не перегружена.
6.	 Тестирование
Написаны тесты для функциональностей проекта.
Общее покрытие функционального кода — более 70%.

